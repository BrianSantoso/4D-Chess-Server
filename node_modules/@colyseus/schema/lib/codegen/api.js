"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
var fs = require("fs");
var path = require("path");
var parser_1 = require("./parser");
function generate(targetId, options) {
    var generator;
    try {
        generator = require('./languages/' + targetId).generate;
    }
    catch (e) {
        throw new Error("You must provide a valid generator as argument, such as: --csharp, --haxe or --cpp");
    }
    if (!fs.existsSync(options.output)) {
        console.log("Creating", options.output, "directory");
        fs.mkdirSync(options.output);
    }
    /**
     * Default `@type()` decorator name
     */
    if (!options.decorator) {
        options.decorator = "type";
    }
    var structures = parser_1.parseFiles(options.files, options.decorator);
    // Post-process classes before generating
    structures.classes.forEach(function (klass) { return klass.postProcessing(); });
    var files = generator(structures, options);
    files.forEach(function (file) {
        var outputPath = path.resolve(options.output, file.name);
        fs.writeFileSync(outputPath, file.content);
        console.log("generated:", file.name);
    });
}
exports.generate = generate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvZGVnZW4vYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHVCQUF5QjtBQUN6QiwyQkFBNkI7QUFHN0IsbUNBQXNDO0FBU3RDLFNBQWdCLFFBQVEsQ0FBQyxRQUFnQixFQUFFLE9BQXdCO0lBQy9ELElBQUksU0FBbUIsQ0FBQztJQUV4QixJQUFJO1FBQ0EsU0FBUyxHQUFHLE9BQU8sQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDO0tBRTNEO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixNQUFNLElBQUksS0FBSyxDQUFDLG9GQUFvRixDQUFDLENBQUM7S0FDekc7SUFFRCxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNyRCxFQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNoQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUU7UUFBRSxPQUFPLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztLQUFFO0lBRXZELElBQU0sVUFBVSxHQUFHLG1CQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFaEUseUNBQXlDO0lBQ3pDLFVBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxDQUFDLGNBQWMsRUFBRSxFQUF0QixDQUFzQixDQUFDLENBQUM7SUFFNUQsSUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUU3QyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBVTtRQUNyQixJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNELEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekMsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBaENELDRCQWdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuXG5pbXBvcnQgeyBGaWxlIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IHBhcnNlRmlsZXMgfSBmcm9tIFwiLi9wYXJzZXJcIjtcblxuZXhwb3J0IGludGVyZmFjZSBHZW5lcmF0ZU9wdGlvbnMge1xuICAgIGZpbGVzOiBzdHJpbmdbXSxcbiAgICBvdXRwdXQ6IHN0cmluZztcbiAgICBkZWNvcmF0b3I/OiBzdHJpbmc7XG4gICAgbmFtZXNwYWNlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGUodGFyZ2V0SWQ6IHN0cmluZywgb3B0aW9uczogR2VuZXJhdGVPcHRpb25zKSB7XG4gICAgbGV0IGdlbmVyYXRvcjogRnVuY3Rpb247XG5cbiAgICB0cnkge1xuICAgICAgICBnZW5lcmF0b3IgPSByZXF1aXJlKCcuL2xhbmd1YWdlcy8nICsgdGFyZ2V0SWQpLmdlbmVyYXRlO1xuXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwcm92aWRlIGEgdmFsaWQgZ2VuZXJhdG9yIGFzIGFyZ3VtZW50LCBzdWNoIGFzOiAtLWNzaGFycCwgLS1oYXhlIG9yIC0tY3BwXCIpO1xuICAgIH1cblxuICAgIGlmICghZnMuZXhpc3RzU3luYyhvcHRpb25zLm91dHB1dCkpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJDcmVhdGluZ1wiLCBvcHRpb25zLm91dHB1dCwgXCJkaXJlY3RvcnlcIik7XG4gICAgICAgIGZzLm1rZGlyU3luYyhvcHRpb25zLm91dHB1dCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBgQHR5cGUoKWAgZGVjb3JhdG9yIG5hbWVcbiAgICAgKi9cbiAgICBpZiAoIW9wdGlvbnMuZGVjb3JhdG9yKSB7IG9wdGlvbnMuZGVjb3JhdG9yID0gXCJ0eXBlXCI7IH1cblxuICAgIGNvbnN0IHN0cnVjdHVyZXMgPSBwYXJzZUZpbGVzKG9wdGlvbnMuZmlsZXMsIG9wdGlvbnMuZGVjb3JhdG9yKTtcblxuICAgIC8vIFBvc3QtcHJvY2VzcyBjbGFzc2VzIGJlZm9yZSBnZW5lcmF0aW5nXG4gICAgc3RydWN0dXJlcy5jbGFzc2VzLmZvckVhY2goa2xhc3MgPT4ga2xhc3MucG9zdFByb2Nlc3NpbmcoKSk7XG5cbiAgICBjb25zdCBmaWxlcyA9IGdlbmVyYXRvcihzdHJ1Y3R1cmVzLCBvcHRpb25zKTtcblxuICAgIGZpbGVzLmZvckVhY2goKGZpbGU6IEZpbGUpID0+IHtcbiAgICAgICAgY29uc3Qgb3V0cHV0UGF0aCA9IHBhdGgucmVzb2x2ZShvcHRpb25zLm91dHB1dCwgZmlsZS5uYW1lKTtcbiAgICAgICAgZnMud3JpdGVGaWxlU3luYyhvdXRwdXRQYXRoLCBmaWxlLmNvbnRlbnQpO1xuICAgICAgICBjb25zb2xlLmxvZyhcImdlbmVyYXRlZDpcIiwgZmlsZS5uYW1lKTtcbiAgICB9KTtcbn1cbiJdfQ==