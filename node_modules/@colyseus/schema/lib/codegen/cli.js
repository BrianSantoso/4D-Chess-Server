"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var argv_1 = require("./argv");
var api_1 = require("./api");
var supportedTargets = {
    csharp: 'generate for C#/Unity',
    cpp: 'generate for C++',
    haxe: 'generate for Haxe',
    ts: 'generate for TypeScript',
    js: 'generate for JavaScript',
    java: 'generate for Java',
    lua: 'generate for LUA',
};
function displayHelp() {
    console.log("\nschema-codegen [path/to/Schema.ts]\n\nUsage (C#/Unity)\n    schema-codegen src/Schema.ts --output client-side/ --csharp --namespace MyGame.Schema\n\nValid options:\n    --output: the output directory for generated client-side schema files\n" + Object.
        keys(supportedTargets).
        map(function (targetId) { return ("    --" + targetId + ": " + supportedTargets[targetId]); }).
        join("\n") + "\n\nOptional:\n    --namespace: generate namespace on output code\n    --decorator: custom name for @type decorator to scan for");
    process.exit();
}
var args = argv_1.default(process.argv.slice(2));
if (args.help) {
    displayHelp();
}
var targetId;
for (var target in supportedTargets) {
    if (args[target]) {
        targetId = target;
    }
}
if (!args.output) {
    console.error("You must provide a valid --output directory.");
    displayHelp();
}
try {
    args.files = args._;
    api_1.generate(targetId, {
        files: args._,
        decorator: args.decorator,
        output: args.output,
        namespace: args.namespace
    });
}
catch (e) {
    console.error(e.message);
    console.error(e.stack);
    displayHelp();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvZGVnZW4vY2xpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQTBCO0FBQzFCLDZCQUFpQztBQUVqQyxJQUFNLGdCQUFnQixHQUFHO0lBQ3JCLE1BQU0sRUFBRSx1QkFBdUI7SUFDL0IsR0FBRyxFQUFFLGtCQUFrQjtJQUN2QixJQUFJLEVBQUUsbUJBQW1CO0lBQ3pCLEVBQUUsRUFBRSx5QkFBeUI7SUFDN0IsRUFBRSxFQUFFLHlCQUF5QjtJQUM3QixJQUFJLEVBQUUsbUJBQW1CO0lBQ3pCLEdBQUcsRUFBRSxrQkFBa0I7Q0FDMUIsQ0FBQTtBQUVELFNBQVMsV0FBVztJQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDLHVQQU9kLE1BQU07UUFDSixJQUFJLENBQUMsZ0JBQWdCLENBQUM7UUFDdEIsR0FBRyxDQUFDLFVBQUMsUUFBUSxJQUFLLE9BQUEsQ0FDdEIsV0FBUyxRQUFRLFVBQUssZ0JBQWdCLENBQUMsUUFBUSxDQUFHLENBQzdDLEVBRmlCLENBRWpCLENBQUM7UUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLG9JQUkrQyxDQUFDLENBQUM7SUFDM0QsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25CLENBQUM7QUFFRCxJQUFNLElBQUksR0FBRyxjQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6QyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7SUFDWCxXQUFXLEVBQUUsQ0FBQztDQUNqQjtBQUVELElBQUksUUFBZ0IsQ0FBQztBQUNyQixLQUFLLElBQUksTUFBTSxJQUFJLGdCQUFnQixFQUFFO0lBQ2pDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ2QsUUFBUSxHQUFHLE1BQU0sQ0FBQztLQUNyQjtDQUNKO0FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7SUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7SUFDOUQsV0FBVyxFQUFFLENBQUM7Q0FDakI7QUFFRCxJQUFJO0lBQ0EsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3BCLGNBQVEsQ0FBQyxRQUFRLEVBQUU7UUFDZixLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDYixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7UUFDekIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1FBQ25CLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztLQUM1QixDQUFDLENBQUM7Q0FFTjtBQUFDLE9BQU8sQ0FBQyxFQUFFO0lBQ1IsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekIsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsV0FBVyxFQUFFLENBQUM7Q0FDakIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXJndiBmcm9tIFwiLi9hcmd2XCI7XG5pbXBvcnQgeyBnZW5lcmF0ZSB9IGZyb20gXCIuL2FwaVwiO1xuXG5jb25zdCBzdXBwb3J0ZWRUYXJnZXRzID0ge1xuICAgIGNzaGFycDogJ2dlbmVyYXRlIGZvciBDIy9Vbml0eScsXG4gICAgY3BwOiAnZ2VuZXJhdGUgZm9yIEMrKycsXG4gICAgaGF4ZTogJ2dlbmVyYXRlIGZvciBIYXhlJyxcbiAgICB0czogJ2dlbmVyYXRlIGZvciBUeXBlU2NyaXB0JyxcbiAgICBqczogJ2dlbmVyYXRlIGZvciBKYXZhU2NyaXB0JyxcbiAgICBqYXZhOiAnZ2VuZXJhdGUgZm9yIEphdmEnLFxuICAgIGx1YTogJ2dlbmVyYXRlIGZvciBMVUEnLFxufVxuXG5mdW5jdGlvbiBkaXNwbGF5SGVscCgpIHtcbiAgICBjb25zb2xlLmxvZyhgXFxuc2NoZW1hLWNvZGVnZW4gW3BhdGgvdG8vU2NoZW1hLnRzXVxuXG5Vc2FnZSAoQyMvVW5pdHkpXG4gICAgc2NoZW1hLWNvZGVnZW4gc3JjL1NjaGVtYS50cyAtLW91dHB1dCBjbGllbnQtc2lkZS8gLS1jc2hhcnAgLS1uYW1lc3BhY2UgTXlHYW1lLlNjaGVtYVxuXG5WYWxpZCBvcHRpb25zOlxuICAgIC0tb3V0cHV0OiB0aGUgb3V0cHV0IGRpcmVjdG9yeSBmb3IgZ2VuZXJhdGVkIGNsaWVudC1zaWRlIHNjaGVtYSBmaWxlc1xuJHtPYmplY3QuXG4gICAga2V5cyhzdXBwb3J0ZWRUYXJnZXRzKS5cbiAgICBtYXAoKHRhcmdldElkKSA9PiAoXG5gICAgIC0tJHt0YXJnZXRJZH06ICR7c3VwcG9ydGVkVGFyZ2V0c1t0YXJnZXRJZF19YFxuICAgICkpLlxuICAgIGpvaW4oXCJcXG5cIil9XG5cbk9wdGlvbmFsOlxuICAgIC0tbmFtZXNwYWNlOiBnZW5lcmF0ZSBuYW1lc3BhY2Ugb24gb3V0cHV0IGNvZGVcbiAgICAtLWRlY29yYXRvcjogY3VzdG9tIG5hbWUgZm9yIEB0eXBlIGRlY29yYXRvciB0byBzY2FuIGZvcmApO1xuICAgIHByb2Nlc3MuZXhpdCgpO1xufVxuXG5jb25zdCBhcmdzID0gYXJndihwcm9jZXNzLmFyZ3Yuc2xpY2UoMikpO1xuaWYgKGFyZ3MuaGVscCkge1xuICAgIGRpc3BsYXlIZWxwKCk7XG59XG5cbmxldCB0YXJnZXRJZDogc3RyaW5nO1xuZm9yIChsZXQgdGFyZ2V0IGluIHN1cHBvcnRlZFRhcmdldHMpIHtcbiAgICBpZiAoYXJnc1t0YXJnZXRdKSB7XG4gICAgICAgIHRhcmdldElkID0gdGFyZ2V0O1xuICAgIH1cbn1cblxuaWYgKCFhcmdzLm91dHB1dCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJZb3UgbXVzdCBwcm92aWRlIGEgdmFsaWQgLS1vdXRwdXQgZGlyZWN0b3J5LlwiKTtcbiAgICBkaXNwbGF5SGVscCgpO1xufVxuXG50cnkge1xuICAgIGFyZ3MuZmlsZXMgPSBhcmdzLl87XG4gICAgZ2VuZXJhdGUodGFyZ2V0SWQsIHtcbiAgICAgICAgZmlsZXM6IGFyZ3MuXyxcbiAgICAgICAgZGVjb3JhdG9yOiBhcmdzLmRlY29yYXRvcixcbiAgICAgICAgb3V0cHV0OiBhcmdzLm91dHB1dCxcbiAgICAgICAgbmFtZXNwYWNlOiBhcmdzLm5hbWVzcGFjZVxuICAgIH0pO1xuXG59IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihlLm1lc3NhZ2UpO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgZGlzcGxheUhlbHAoKTtcbn1cbiJdfQ==