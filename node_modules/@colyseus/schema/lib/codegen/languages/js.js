"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
var types_1 = require("../types");
var typeMaps = {
    "string": "string",
    "number": "number",
    "boolean": "boolean",
    "int8": "number",
    "uint8": "number",
    "int16": "number",
    "uint16": "number",
    "int32": "number",
    "uint32": "number",
    "int64": "number",
    "uint64": "number",
    "float32": "number",
    "float64": "number",
};
var distinct = function (value, index, self) { return self.indexOf(value) === index; };
function generate(context, options) {
    return context.classes.map(function (klass) { return ({
        name: klass.name + ".js",
        content: generateClass(klass, options.namespace, context.classes)
    }); });
}
exports.generate = generate;
function generateClass(klass, namespace, allClasses) {
    var allRefs = [];
    klass.properties.forEach(function (property) {
        var type = property.type;
        // keep all refs list
        if ((type === "ref" || type === "array" || type === "map")) {
            allRefs.push(property);
        }
    });
    return types_1.getCommentHeader() + "\n\nconst schema = require(\"@colyseus/schema\");\nconst Schema = schema.Schema;\nconst type = schema.type;\n" + allRefs.
        filter(function (ref) { return ref.childType && typeMaps[ref.childType] === undefined; }).
        map(function (ref) { return ref.childType; }).
        concat(types_1.getInheritanceTree(klass, allClasses, false).map(function (klass) { return klass.name; })).
        filter(distinct).
        map(function (childType) { return "const " + childType + " = require(\"./" + childType + "\");"; }).
        join("\n") + "\n\nclass " + klass.name + " extends " + klass.extends + " {\n    constructor () {\n        super();\n" + klass.properties.
        filter(function (prop) { return prop.childType !== undefined; }).
        map(function (prop) { return "        " + generatePropertyInitializer(prop); }).join("\n") + "\n    }\n}\n" + klass.properties.map(function (prop) { return generatePropertyDeclaration(klass.name, prop); }).join("\n") + "\n\nexport default " + klass.name + ";\n";
}
function generatePropertyDeclaration(className, prop) {
    var typeArgs;
    if (prop.childType) {
        var isUpcaseFirst = prop.childType.match(/^[A-Z]/);
        if (isUpcaseFirst) {
            typeArgs += ", " + prop.childType;
        }
        else {
            typeArgs += ", \"" + prop.childType + "\"";
        }
        if (prop.type === "ref") {
            typeArgs = "" + prop.childType;
        }
        else if (prop.type === "array") {
            typeArgs = (isUpcaseFirst)
                ? "[ " + prop.childType + " ]"
                : "[ \"" + prop.childType + "\" ]";
        }
        else if (prop.type === "map") {
            typeArgs = (isUpcaseFirst)
                ? "{ map: " + prop.childType + " }"
                : "{ map: \"" + prop.childType + "\" }";
        }
    }
    else {
        typeArgs = "\"" + prop.type + "\"";
    }
    return "type(" + typeArgs + ")(" + className + ".prototype, \"" + prop.name + "\");";
}
function generatePropertyInitializer(prop) {
    var initializer = "";
    if (prop.type === "ref") {
        initializer = "new " + prop.childType + "()";
    }
    else if (prop.type === "array") {
        initializer = "new schema.ArraySchema()";
    }
    else if (prop.type === "map") {
        initializer = "new schema.MapSchema()";
    }
    return "this." + prop.name + " = " + initializer;
}
//# sourceMappingURL=data:application/json;base64,