"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
var types_1 = require("../types");
var typeMaps = {
    "string": "string",
    "number": "float",
    "boolean": "bool",
    "int8": "int",
    "uint8": "uint",
    "int16": "short",
    "uint16": "ushort",
    "int32": "int",
    "uint32": "uint",
    "int64": "long",
    "uint64": "ulong",
    "float32": "float",
    "float64": "double",
};
/**
 * C# Code Generator
 */
var capitalize = function (s) {
    if (typeof s !== 'string')
        return '';
    return s.charAt(0).toUpperCase() + s.slice(1);
};
function generate(context, options) {
    return __spread(context.classes.map(function (structure) { return ({
        name: structure.name + ".cs",
        content: generateClass(structure, options.namespace)
    }); }), context.interfaces.map(function (structure) { return ({
        name: structure.name + ".cs",
        content: generateInterface(structure, options.namespace)
    }); }));
}
exports.generate = generate;
function generateClass(klass, namespace) {
    var indent = (namespace) ? "\t" : "";
    return types_1.getCommentHeader() + "\n\nusing Colyseus.Schema;\n" + (namespace ? "\nnamespace " + namespace + " {" : "") + "\n" + indent + "public partial class " + klass.name + " : " + klass.extends + " {\n" + klass.properties.map(function (prop) { return generateProperty(prop, indent); }).join("\n\n") + "\n" + indent + "}\n" + (namespace ? "}" : "") + "\n";
}
function generateProperty(prop, indent) {
    if (indent === void 0) { indent = ""; }
    var typeArgs = "\"" + prop.type + "\"";
    var property = "public";
    var langType;
    var initializer = "";
    if (prop.childType) {
        var isUpcaseFirst = prop.childType.match(/^[A-Z]/);
        if (prop.type === "ref") {
            langType = (isUpcaseFirst)
                ? prop.childType
                : typeMaps[prop.childType];
        }
        else {
            var containerClass = capitalize(prop.type);
            langType = (isUpcaseFirst)
                ? containerClass + "Schema<" + prop.childType + ">"
                : containerClass + "Schema<" + typeMaps[prop.childType] + ">";
        }
        typeArgs += ", typeof(" + langType + ")";
        if (!isUpcaseFirst) {
            typeArgs += ", \"" + prop.childType + "\"";
        }
        initializer = "new " + langType + "()";
    }
    else {
        langType = typeMaps[prop.type];
        initializer = "default(" + langType + ")";
    }
    property += " " + langType + " " + prop.name;
    var ret = (prop.deprecated) ? "\t\t[System.Obsolete(\"field '" + prop.name + "' is deprecated.\", true)]\n" : '';
    return ret + ("\t" + indent + "[Type(" + prop.index + ", " + typeArgs + ")]\n\t" + indent + property + " = " + initializer + ";");
}
function generateInterface(struct, namespace) {
    var indent = (namespace) ? "\t" : "";
    return types_1.getCommentHeader() + "\n\nusing Colyseus.Schema;\n" + (namespace ? "\nnamespace " + namespace + " {" : "") + "\n" + indent + "public class " + struct.name + " {\n" + struct.properties.map(function (prop) { return "\t" + indent + "public " + typeMaps[prop.type] + " " + prop.name + ";"; }).join("\n") + "\n" + indent + "}\n" + (namespace ? "}" : "") + "\n";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3NoYXJwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvZGVnZW4vbGFuZ3VhZ2VzL2NzaGFycC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGtDQUE4RTtBQUk5RSxJQUFNLFFBQVEsR0FBRztJQUNiLFFBQVEsRUFBRSxRQUFRO0lBQ2xCLFFBQVEsRUFBRSxPQUFPO0lBQ2pCLFNBQVMsRUFBRSxNQUFNO0lBQ2pCLE1BQU0sRUFBRSxLQUFLO0lBQ2IsT0FBTyxFQUFFLE1BQU07SUFDZixPQUFPLEVBQUUsT0FBTztJQUNoQixRQUFRLEVBQUUsUUFBUTtJQUNsQixPQUFPLEVBQUUsS0FBSztJQUNkLFFBQVEsRUFBRSxNQUFNO0lBQ2hCLE9BQU8sRUFBRSxNQUFNO0lBQ2YsUUFBUSxFQUFFLE9BQU87SUFDakIsU0FBUyxFQUFFLE9BQU87SUFDbEIsU0FBUyxFQUFFLFFBQVE7Q0FDdEIsQ0FBQTtBQUVEOztHQUVHO0FBQ0gsSUFBTSxVQUFVLEdBQUcsVUFBQyxDQUFDO0lBQ2pCLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUTtRQUFFLE9BQU8sRUFBRSxDQUFBO0lBQ3BDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELENBQUMsQ0FBQTtBQUVELFNBQWdCLFFBQVEsQ0FBRSxPQUFnQixFQUFFLE9BQXdCO0lBQ2hFLGdCQUNPLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQUEsU0FBUyxJQUFJLE9BQUEsQ0FBQztRQUNqQyxJQUFJLEVBQUssU0FBUyxDQUFDLElBQUksUUFBSztRQUM1QixPQUFPLEVBQUUsYUFBYSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDO0tBQ3ZELENBQUMsRUFIa0MsQ0FHbEMsQ0FBQyxFQUNBLE9BQU8s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QUFLLFFBQVEsY0FDeEQsTUFBTSxHQUFHLFFBQVEsV0FBTSxXQUFXLE1BQUcsQ0FBQSxDQUFDO0FBQzFDLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFDLE1BQWlCLEVBQUUsU0FBaUI7SUFDM0QsSUFBTSxNQUFNLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDdkMsT0FBVSx3QkFBZ0IsRUFBRSxxQ0FHOUIsU0FBUyxDQUFDLENBQUMsQ0FBQyxpQkFBZSxTQUFTLE9BQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUM3QyxNQUFNLHFCQUFnQixNQUFNLENBQUMsSUFBSSxZQUNqQyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLE9BQUssTUFBTSxlQUFVLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQUksSUFBSSxDQUFDLElBQUksTUFBRyxFQUF4RCxDQUF3RCxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUNsRyxNQUFNLFlBQ04sU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFDckIsQ0FBQztBQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGFzcywgUHJvcGVydHksIEZpbGUsIGdldENvbW1lbnRIZWFkZXIsIEludGVyZmFjZSB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgR2VuZXJhdGVPcHRpb25zIH0gZnJvbSBcIi4uL2FwaVwiO1xuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gXCIuLi90eXBlc1wiO1xuXG5jb25zdCB0eXBlTWFwcyA9IHtcbiAgICBcInN0cmluZ1wiOiBcInN0cmluZ1wiLFxuICAgIFwibnVtYmVyXCI6IFwiZmxvYXRcIixcbiAgICBcImJvb2xlYW5cIjogXCJib29sXCIsXG4gICAgXCJpbnQ4XCI6IFwiaW50XCIsXG4gICAgXCJ1aW50OFwiOiBcInVpbnRcIixcbiAgICBcImludDE2XCI6IFwic2hvcnRcIixcbiAgICBcInVpbnQxNlwiOiBcInVzaG9ydFwiLFxuICAgIFwiaW50MzJcIjogXCJpbnRcIixcbiAgICBcInVpbnQzMlwiOiBcInVpbnRcIixcbiAgICBcImludDY0XCI6IFwibG9uZ1wiLFxuICAgIFwidWludDY0XCI6IFwidWxvbmdcIixcbiAgICBcImZsb2F0MzJcIjogXCJmbG9hdFwiLFxuICAgIFwiZmxvYXQ2NFwiOiBcImRvdWJsZVwiLFxufVxuXG4vKipcbiAqIEMjIENvZGUgR2VuZXJhdG9yXG4gKi9cbmNvbnN0IGNhcGl0YWxpemUgPSAocykgPT4ge1xuICAgIGlmICh0eXBlb2YgcyAhPT0gJ3N0cmluZycpIHJldHVybiAnJ1xuICAgIHJldHVybiBzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcy5zbGljZSgxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlIChjb250ZXh0OiBDb250ZXh0LCBvcHRpb25zOiBHZW5lcmF0ZU9wdGlvbnMpOiBGaWxlW10ge1xuICAgIHJldHVybiBbXG4gICAgICAgIC4uLmNvbnRleHQuY2xhc3Nlcy5tYXAoc3RydWN0dXJlID0+ICh7XG4gICAgICAgICAgICBuYW1lOiBgJHtzdHJ1Y3R1cmUubmFtZX0uY3NgLFxuICAgICAgICAgICAgY29udGVudDogZ2VuZXJhdGVDbGFzcyhzdHJ1Y3R1cmUsIG9wdGlvbnMubmFtZXNwYWNlKVxuICAgICAgICB9KSksXG4gICAgICAgIC4uLmNvbnRleHQuaW50ZXJmYWNlcy5tYXAoc3RydWN0dXJlID0+ICh7XG4gICAgICAgICAgICBuYW1lOiBgJHtzdHJ1Y3R1cmUubmFtZX0uY3NgLFxuICAgICAgICAgICAgY29udGVudDogZ2VuZXJhdGVJbnRlcmZhY2Uoc3RydWN0dXJlLCBvcHRpb25zLm5hbWVzcGFjZSlcbiAgICAgICAgfSkpXG4gICAgXTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVDbGFzcyhrbGFzczogQ2xhc3MsIG5hbWVzcGFjZTogc3RyaW5nKSB7XG4gICAgY29uc3QgaW5kZW50ID0gKG5hbWVzcGFjZSkgPyBcIlxcdFwiIDogXCJcIjtcbiAgICByZXR1cm4gYCR7Z2V0Q29tbWVudEhlYWRlcigpfVxuXG51c2luZyBDb2x5c2V1cy5TY2hlbWE7XG4ke25hbWVzcGFjZSA/IGBcXG5uYW1lc3BhY2UgJHtuYW1lc3BhY2V9IHtgIDogXCJcIn1cbiR7aW5kZW50fXB1YmxpYyBwYXJ0aWFsIGNsYXNzICR7a2xhc3MubmFtZX0gOiAke2tsYXNzLmV4dGVuZHN9IHtcbiR7a2xhc3MucHJvcGVydGllcy5tYXAocHJvcCA9PiBnZW5lcmF0ZVByb3BlcnR5KHByb3AsIGluZGVudCkpLmpvaW4oXCJcXG5cXG5cIil9XG4ke2luZGVudH19XG4ke25hbWVzcGFjZSA/IFwifVwiIDogXCJcIn1cbmA7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlUHJvcGVydHkocHJvcDogUHJvcGVydHksIGluZGVudDogc3RyaW5nID0gXCJcIikge1xuICAgIGxldCB0eXBlQXJncyA9IGBcIiR7cHJvcC50eXBlfVwiYDtcbiAgICBsZXQgcHJvcGVydHkgPSBcInB1YmxpY1wiO1xuICAgIGxldCBsYW5nVHlwZTogc3RyaW5nO1xuICAgIGxldCBpbml0aWFsaXplciA9IFwiXCI7XG5cbiAgICBpZiAocHJvcC5jaGlsZFR5cGUpIHtcbiAgICAgICAgY29uc3QgaXNVcGNhc2VGaXJzdCA9IHByb3AuY2hpbGRUeXBlLm1hdGNoKC9eW0EtWl0vKTtcblxuICAgICAgICBpZihwcm9wLnR5cGUgPT09IFwicmVmXCIpIHtcbiAgICAgICAgICAgIGxhbmdUeXBlID0gKGlzVXBjYXNlRmlyc3QpXG4gICAgICAgICAgICAgICAgPyBwcm9wLmNoaWxkVHlwZVxuICAgICAgICAgICAgICAgIDogdHlwZU1hcHNbcHJvcC5jaGlsZFR5cGVdO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJDbGFzcyA9IGNhcGl0YWxpemUocHJvcC50eXBlKTtcblxuICAgICAgICAgICAgbGFuZ1R5cGUgPSAoaXNVcGNhc2VGaXJzdClcbiAgICAgICAgICAgICAgICA/IGAke2NvbnRhaW5lckNsYXNzfVNjaGVtYTwke3Byb3AuY2hpbGRUeXBlfT5gXG4gICAgICAgICAgICAgICAgOiBgJHtjb250YWluZXJDbGFzc31TY2hlbWE8JHt0eXBlTWFwc1twcm9wLmNoaWxkVHlwZV19PmA7XG4gICAgICAgIH1cblxuICAgICAgICB0eXBlQXJncyArPSBgLCB0eXBlb2YoJHtsYW5nVHlwZX0pYDtcblxuICAgICAgICBpZiAoIWlzVXBjYXNlRmlyc3QpIHtcbiAgICAgICAgICAgIHR5cGVBcmdzICs9IGAsIFwiJHtwcm9wLmNoaWxkVHlwZX1cImA7XG4gICAgICAgIH1cblxuICAgICAgICBpbml0aWFsaXplciA9IGBuZXcgJHtsYW5nVHlwZX0oKWA7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBsYW5nVHlwZSA9IHR5cGVNYXBzW3Byb3AudHlwZV07XG4gICAgICAgIGluaXRpYWxpemVyID0gYGRlZmF1bHQoJHtsYW5nVHlwZX0pYDtcbiAgICB9XG5cbiAgICBwcm9wZXJ0eSArPSBgICR7bGFuZ1R5cGV9ICR7cHJvcC5uYW1lfWA7XG5cbiAgICBsZXQgcmV0ID0gKHByb3AuZGVwcmVjYXRlZCkgPyBgXFx0XFx0W1N5c3RlbS5PYnNvbGV0ZShcImZpZWxkICcke3Byb3AubmFtZX0nIGlzIGRlcHJlY2F0ZWQuXCIsIHRydWUpXVxcbmAgOiAnJztcblxuICAgIHJldHVybiByZXQgKyBgXFx0JHtpbmRlbnR9W1R5cGUoJHtwcm9wLmluZGV4fSwgJHt0eXBlQXJnc30pXVxuXFx0JHtpbmRlbnR9JHtwcm9wZXJ0eX0gPSAke2luaXRpYWxpemVyfTtgO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUludGVyZmFjZShzdHJ1Y3Q6IEludGVyZmFjZSwgbmFtZXNwYWNlOiBzdHJpbmcpIHtcbiAgICBjb25zdCBpbmRlbnQgPSAobmFtZXNwYWNlKSA/IFwiXFx0XCIgOiBcIlwiO1xuICAgIHJldHVybiBgJHtnZXRDb21tZW50SGVhZGVyKCl9XG5cbnVzaW5nIENvbHlzZXVzLlNjaGVtYTtcbiR7bmFtZXNwYWNlID8gYFxcbm5hbWVzcGFjZSAke25hbWVzcGFjZX0ge2AgOiBcIlwifVxuJHtpbmRlbnR9cHVibGljIGNsYXNzICR7c3RydWN0Lm5hbWV9IHtcbiR7c3RydWN0LnByb3BlcnRpZXMubWFwKHByb3AgPT4gYFxcdCR7aW5kZW50fXB1YmxpYyAke3R5cGVNYXBzW3Byb3AudHlwZV19ICR7cHJvcC5uYW1lfTtgKS5qb2luKFwiXFxuXCIpfVxuJHtpbmRlbnR9fVxuJHtuYW1lc3BhY2UgPyBcIn1cIiA6IFwiXCJ9XG5gO1xufVxuIl19