"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
var types_1 = require("../types");
var typeMaps = {
    "string": "string",
    "number": "number",
    "boolean": "boolean",
    "int8": "number",
    "uint8": "number",
    "int16": "number",
    "uint16": "number",
    "int32": "number",
    "uint32": "number",
    "int64": "number",
    "uint64": "number",
    "float32": "number",
    "float64": "number",
};
var distinct = function (value, index, self) { return self.indexOf(value) === index; };
function generate(context, options) {
    return __spread(context.classes.map(function (structure) { return ({
        name: structure.name + ".ts",
        content: generateClass(structure, options.namespace, context.classes)
    }); }), context.interfaces.map(function (structure) { return ({
        name: structure.name + ".ts",
        content: generateInterface(structure, options.namespace, context.classes),
    }); }));
}
exports.generate = generate;
function generateClass(klass, namespace, allClasses) {
    var allRefs = [];
    klass.properties.forEach(function (property) {
        var type = property.type;
        // keep all refs list
        if ((type === "ref" || type === "array" || type === "map")) {
            allRefs.push(property);
        }
    });
    return types_1.getCommentHeader() + "\n\nimport { Schema, type, ArraySchema, MapSchema, DataChange } from \"@colyseus/schema\";\n" + allRefs.
        filter(function (ref) { return ref.childType && typeMaps[ref.childType] === undefined; }).
        map(function (ref) { return ref.childType; }).
        concat(types_1.getInheritanceTree(klass, allClasses, false).map(function (klass) { return klass.name; })).
        filter(distinct).
        map(function (childType) { return "import { " + childType + " } from \"./" + childType + "\""; }).
        join("\n") + "\n\nexport class " + klass.name + " extends " + klass.extends + " {\n" + klass.properties.map(function (prop) { return "    " + generateProperty(prop); }).join("\n") + "\n}\n";
}
function generateProperty(prop) {
    var langType;
    var initializer = "";
    var typeArgs;
    if (prop.childType) {
        var isUpcaseFirst = prop.childType.match(/^[A-Z]/);
        if (isUpcaseFirst) {
            typeArgs += ", " + prop.childType;
        }
        else {
            typeArgs += ", \"" + prop.childType + "\"";
        }
        if (prop.type === "ref") {
            langType = "" + prop.childType;
            initializer = "new " + prop.childType + "()";
            typeArgs = "" + prop.childType;
        }
        else if (prop.type === "array") {
            langType = (isUpcaseFirst)
                ? "ArraySchema<" + prop.childType + ">"
                : "ArraySchema<" + typeMaps[prop.childType] + ">";
            initializer = "new " + langType + "()";
            typeArgs = (isUpcaseFirst)
                ? "[ " + prop.childType + " ]"
                : "[ \"" + prop.childType + "\" ]";
        }
        else if (prop.type === "map") {
            langType = (isUpcaseFirst)
                ? "MapSchema<" + prop.childType + ">"
                : "MapSchema<" + typeMaps[prop.childType] + ">";
            initializer = "new " + langType + "()";
            typeArgs = (isUpcaseFirst)
                ? "{ map: " + prop.childType + " }"
                : "{ map: \"" + prop.childType + "\" }";
        }
    }
    else {
        langType = typeMaps[prop.type];
        typeArgs = "\"" + prop.type + "\"";
    }
    return "@type(" + typeArgs + ") public " + prop.name + "!: " + langType + ((initializer) ? " = " + initializer : "") + ";";
}
function generateInterface(structure, namespace, allClasses) {
    return types_1.getCommentHeader() + "\n\nexport interface " + structure.name + " {\n" + structure.properties.map(function (prop) { return "    " + prop.name + ": " + prop.type + ";"; }).join("\n") + "\n}\n";
}
//# sourceMappingURL=data:application/json;base64,