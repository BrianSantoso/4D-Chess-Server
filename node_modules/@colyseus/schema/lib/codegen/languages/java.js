"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
var types_1 = require("../types");
var typeMaps = {
    "string": "String",
    "number": "float",
    "boolean": "boolean",
    "int8": "byte",
    "uint8": "short",
    "int16": "short",
    "uint16": "int",
    "int32": "int",
    "uint32": "long",
    "int64": "long",
    "uint64": "long",
    "float32": "float",
    "float64": "double",
};
var typeInitializer = {
    "string": '""',
    "number": "0",
    "boolean": "false",
    "int8": "0",
    "uint8": "0",
    "int16": "0",
    "uint16": "0",
    "int32": "0",
    "uint32": "0",
    "int64": "0",
    "uint64": "0",
    "float32": "0",
    "float64": "0",
};
/**
 * C# Code Generator
 */
function generate(context, options) {
    return context.classes.map(function (klass) { return ({
        name: klass.name + ".java",
        content: generateClass(klass, options.namespace)
    }); });
}
exports.generate = generate;
function generateClass(klass, namespace) {
    var indent = (namespace) ? "\t" : "";
    return types_1.getCommentHeader() + "\n" + (namespace ? "\npackage " + namespace + ";" : "") + "\n\nimport io.colyseus.serializer.schema.Schema;\nimport io.colyseus.serializer.schema.annotations.SchemaClass;\nimport io.colyseus.serializer.schema.annotations.SchemaField;\n\n@SchemaClass\n" + indent + "public class " + klass.name + " extends " + klass.extends + " {\n" + klass.properties.map(function (prop) { return generateProperty(prop, indent); }).join("\n\n") + "\n" + indent + "}\n" + (namespace ? "}" : "") + "\n";
}
function generateProperty(prop, indent) {
    if (indent === void 0) { indent = ""; }
    var typeArgs = prop.index + "/" + prop.type;
    var property = "public";
    var langType;
    var ctorArgs = "";
    var initializer = "";
    if (prop.childType) {
        var isUpcaseFirst = prop.childType.match(/^[A-Z]/);
        if (prop.type !== "ref" && isUpcaseFirst) {
            ctorArgs = prop.childType + ".class";
        }
        if (prop.type === "ref") {
            langType = (isUpcaseFirst)
                ? prop.childType
                : typeMaps[prop.childType];
            initializer = "new " + langType + ((prop.type !== "ref" && isUpcaseFirst) ? "<>" : "") + "(" + ctorArgs + ")";
        }
        else if (prop.type === "array") {
            langType = (isUpcaseFirst)
                ? "ArraySchema<" + prop.childType + ">"
                : "ArraySchema";
            initializer = "new ArraySchema" + ((isUpcaseFirst) ? "<>" : "") + "(" + ctorArgs + ")";
        }
        else if (prop.type === "map") {
            langType = (isUpcaseFirst)
                ? "MapSchema<" + prop.childType + ">"
                : "MapSchema";
            initializer = "new MapSchema" + ((isUpcaseFirst) ? "<>" : "") + "(" + ctorArgs + ")";
        }
        if (prop.type !== "ref") {
            typeArgs += (isUpcaseFirst)
                ? "/ref"
                : "/" + prop.childType;
        }
    }
    else {
        langType = typeMaps[prop.type];
        initializer = typeInitializer[prop.type];
    }
    property += " " + langType + " " + prop.name;
    return "\t@SchemaField(\"" + typeArgs + "\")\t" + indent + "\n\t" + indent + property + " = " + initializer + ";";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamF2YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb2RlZ2VuL2xhbmd1YWdlcy9qYXZhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGtDQUE0RTtBQUc1RSxJQUFNLFFBQVEsR0FBRztJQUNiLFFBQVEsRUFBRSxRQUFRO0lBQ2xCLFFBQVEsRUFBRSxPQUFPO0lBQ2pCLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLE1BQU0sRUFBRSxNQUFNO0lBQ2QsT0FBTyxFQUFFLE9BQU87SUFDaEIsT0FBTyxFQUFFLE9BQU87SUFDaEIsUUFBUSxFQUFFLEtBQUs7SUFDZixPQUFPLEVBQUUsS0FBSztJQUNkLFFBQVEsRUFBRSxNQUFNO0lBQ2hCLE9BQU8sRUFBRSxNQUFNO0lBQ2YsUUFBUSxFQUFFLE1BQU07SUFDaEIsU0FBUyxFQUFFLE9BQU87SUFDbEIsU0FBUyxFQUFFLFFBQVE7Q0FDdEIsQ0FBQTtBQUVELElBQU0sZUFBZSxHQUFHO0lBQ3BCLFFBQVEsRUFBRSxJQUFJO0lBQ2QsUUFBUSxFQUFFLEdBQUc7SUFDYixTQUFTLEVBQUUsT0FBTztJQUNsQixNQUFNLEVBQUUsR0FBRztJQUNYLE9BQU8sRUFBRSxHQUFHO0lBQ1osT0FBTyxFQUFFLEdBQUc7SUFDWixRQUFRLEVBQUUsR0FBRztJQUNiLE9BQU8sRUFBRSxHQUFHO0lBQ1osUUFBUSxFQUFFLEdBQUc7SUFDYixPQUFPLEVBQUUsR0FBRztJQUNaLFFBQVEsRUFBRSxHQUFHO0lBQ2IsU0FBUyxFQUFFLEdBQUc7SUFDZCxTQUFTLEVBQUUsR0FBRztDQUNqQixDQUFBO0FBRUQ7O0dBRUc7QUFFSCxTQUFnQixRQUFRLENBQUUsT0FBZ0IsRUFBRSxPQUF3QjtJQUNoRSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsQ0FBQztRQUNqQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksR0FBRyxPQUFPO1FBQzFCLE9BQU8sRUFB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QyxJQUFJLEtBQUssS0FBSyxFQUFFO1lBQ3JCLFFBQVEsSUFBSSxDQUFDLGFBQWEsQ0FBQztnQkFDdkIsQ0FBQyxDQUFDLE1BQU07Z0JBQ1IsQ0FBQyxDQUFDLE1BQUksSUFBSSxDQUFDLFNBQVcsQ0FBQztTQUM5QjtLQUVKO1NBQU07UUFDSCxRQUFRLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixXQUFXLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM1QztJQUVELFFBQVEsSUFBSSxNQUFJLFFBQVEsU0FBSSxJQUFJLENBQUMsSUFBTSxDQUFDO0lBRXhDLE9BQU8sc0JBQW1CLFFBQVEsYUFBTyxNQUFNLFlBQy9DLE1BQU0sR0FBRyxRQUFRLFdBQU0sV0FBVyxNQUFHLENBQUE7QUFDekMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsYXNzLCBQcm9wZXJ0eSwgRmlsZSwgZ2V0Q29tbWVudEhlYWRlciwgQ29udGV4dCB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgR2VuZXJhdGVPcHRpb25zIH0gZnJvbSBcIi4uL2FwaVwiO1xuXG5jb25zdCB0eXBlTWFwcyA9IHtcbiAgICBcInN0cmluZ1wiOiBcIlN0cmluZ1wiLFxuICAgIFwibnVtYmVyXCI6IFwiZmxvYXRcIixcbiAgICBcImJvb2xlYW5cIjogXCJib29sZWFuXCIsXG4gICAgXCJpbnQ4XCI6IFwiYnl0ZVwiLFxuICAgIFwidWludDhcIjogXCJzaG9ydFwiLFxuICAgIFwiaW50MTZcIjogXCJzaG9ydFwiLFxuICAgIFwidWludDE2XCI6IFwiaW50XCIsXG4gICAgXCJpbnQzMlwiOiBcImludFwiLFxuICAgIFwidWludDMyXCI6IFwibG9uZ1wiLFxuICAgIFwiaW50NjRcIjogXCJsb25nXCIsXG4gICAgXCJ1aW50NjRcIjogXCJsb25nXCIsXG4gICAgXCJmbG9hdDMyXCI6IFwiZmxvYXRcIixcbiAgICBcImZsb2F0NjRcIjogXCJkb3VibGVcIixcbn1cblxuY29uc3QgdHlwZUluaXRpYWxpemVyID0ge1xuICAgIFwic3RyaW5nXCI6ICdcIlwiJyxcbiAgICBcIm51bWJlclwiOiBcIjBcIixcbiAgICBcImJvb2xlYW5cIjogXCJmYWxzZVwiLFxuICAgIFwiaW50OFwiOiBcIjBcIixcbiAgICBcInVpbnQ4XCI6IFwiMFwiLFxuICAgIFwiaW50MTZcIjogXCIwXCIsXG4gICAgXCJ1aW50MTZcIjogXCIwXCIsXG4gICAgXCJpbnQzMlwiOiBcIjBcIixcbiAgICBcInVpbnQzMlwiOiBcIjBcIixcbiAgICBcImludDY0XCI6IFwiMFwiLFxuICAgIFwidWludDY0XCI6IFwiMFwiLFxuICAgIFwiZmxvYXQzMlwiOiBcIjBcIixcbiAgICBcImZsb2F0NjRcIjogXCIwXCIsXG59XG5cbi8qKlxuICogQyMgQ29kZSBHZW5lcmF0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGUgKGNvbnRleHQ6IENvbnRleHQsIG9wdGlvbnM6IEdlbmVyYXRlT3B0aW9ucyk6IEZpbGVbXSB7XG4gICAgcmV0dXJuIGNvbnRleHQuY2xhc3Nlcy5tYXAoa2xhc3MgPT4gKHtcbiAgICAgICAgbmFtZToga2xhc3MubmFtZSArIFwiLmphdmFcIixcbiAgICAgICAgY29udGVudDogZ2VuZXJhdGVDbGFzcyhrbGFzcywgb3B0aW9ucy5uYW1lc3BhY2UpXG4gICAgfSkpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUNsYXNzKGtsYXNzOiBDbGFzcywgbmFtZXNwYWNlOiBzdHJpbmcpIHtcbiAgICBjb25zdCBpbmRlbnQgPSAobmFtZXNwYWNlKSA/IFwiXFx0XCIgOiBcIlwiO1xuICAgIHJldHVybiBgJHtnZXRDb21tZW50SGVhZGVyKCl9XG4ke25hbWVzcGFjZSA/IGBcXG5wYWNrYWdlICR7bmFtZXNwYWNlfTtgIDogXCJcIn1cblxuaW1wb3J0IGlvLmNvbHlzZXVzLnNlcmlhbGl6ZXIuc2NoZW1hLlNjaGVtYTtcbmltcG9ydCBpby5jb2x5c2V1cy5zZXJpYWxpemVyLnNjaGVtYS5hbm5vdGF0aW9ucy5TY2hlbWFDbGFzcztcbmltcG9ydCBpby5jb2x5c2V1cy5zZXJpYWxpemVyLnNjaGVtYS5hbm5vdGF0aW9ucy5TY2hlbWFGaWVsZDtcblxuQFNjaGVtYUNsYXNzXG4ke2luZGVudH1wdWJsaWMgY2xhc3MgJHtrbGFzcy5uYW1lfSBleHRlbmRzICR7a2xhc3MuZXh0ZW5kc30ge1xuJHtrbGFzcy5wcm9wZXJ0aWVzLm1hcChwcm9wID0+IGdlbmVyYXRlUHJvcGVydHkocHJvcCwgaW5kZW50KSkuam9pbihcIlxcblxcblwiKX1cbiR7aW5kZW50fX1cbiR7bmFtZXNwYWNlID8gXCJ9XCIgOiBcIlwifVxuYDtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVQcm9wZXJ0eShwcm9wOiBQcm9wZXJ0eSwgaW5kZW50OiBzdHJpbmcgPSBcIlwiKSB7XG4gICAgbGV0IHR5cGVBcmdzID0gYCR7cHJvcC5pbmRleH0vJHtwcm9wLnR5cGV9YDtcbiAgICBsZXQgcHJvcGVydHkgPSBcInB1YmxpY1wiO1xuICAgIGxldCBsYW5nVHlwZTogc3RyaW5nO1xuICAgIGxldCBjdG9yQXJnczogc3RyaW5nID0gXCJcIjtcbiAgICBsZXQgaW5pdGlhbGl6ZXIgPSBcIlwiO1xuXG4gICAgaWYgKHByb3AuY2hpbGRUeXBlKSB7XG4gICAgICAgIGNvbnN0IGlzVXBjYXNlRmlyc3QgPSBwcm9wLmNoaWxkVHlwZS5tYXRjaCgvXltBLVpdLyk7XG5cbiAgICAgICAgaWYgKHByb3AudHlwZSAhPT0gXCJyZWZcIiAmJiBpc1VwY2FzZUZpcnN0KSB7XG4gICAgICAgICAgICBjdG9yQXJncyA9IGAke3Byb3AuY2hpbGRUeXBlfS5jbGFzc2A7XG4gICAgICAgIH1cblxuICAgICAgICBpZihwcm9wLnR5cGUgPT09IFwicmVmXCIpIHtcbiAgICAgICAgICAgIGxhbmdUeXBlID0gKGlzVXBjYXNlRmlyc3QpXG4gICAgICAgICAgICAgICAgPyBwcm9wLmNoaWxkVHlwZVxuICAgICAgICAgICAgICAgIDogdHlwZU1hcHNbcHJvcC5jaGlsZFR5cGVdO1xuXG4gICAgICAgICAgICBpbml0aWFsaXplciA9IGBuZXcgJHtsYW5nVHlwZX0keyhwcm9wLnR5cGUgIT09IFwicmVmXCIgJiYgaXNVcGNhc2VGaXJzdCkgPyBcIjw+XCIgOiBcIlwifSgke2N0b3JBcmdzfSlgO1xuXG4gICAgICAgIH0gZWxzZSBpZihwcm9wLnR5cGUgPT09IFwiYXJyYXlcIikge1xuICAgICAgICAgICAgbGFuZ1R5cGUgPSAoaXNVcGNhc2VGaXJzdClcbiAgICAgICAgICAgICAgICA/IGBBcnJheVNjaGVtYTwke3Byb3AuY2hpbGRUeXBlfT5gXG4gICAgICAgICAgICAgICAgOiBgQXJyYXlTY2hlbWFgO1xuXG4gICAgICAgICAgICBpbml0aWFsaXplciA9IGBuZXcgQXJyYXlTY2hlbWEkeyhpc1VwY2FzZUZpcnN0KSA/IFwiPD5cIiA6IFwiXCJ9KCR7Y3RvckFyZ3N9KWA7XG5cbiAgICAgICAgfSBlbHNlIGlmKHByb3AudHlwZSA9PT0gXCJtYXBcIikge1xuICAgICAgICAgICAgbGFuZ1R5cGUgPSAoaXNVcGNhc2VGaXJzdClcbiAgICAgICAgICAgICAgICA/IGBNYXBTY2hlbWE8JHtwcm9wLmNoaWxkVHlwZX0+YFxuICAgICAgICAgICAgICAgIDogYE1hcFNjaGVtYWA7XG5cbiAgICAgICAgICAgIGluaXRpYWxpemVyID0gYG5ldyBNYXBTY2hlbWEkeyhpc1VwY2FzZUZpcnN0KSA/IFwiPD5cIiA6IFwiXCJ9KCR7Y3RvckFyZ3N9KWA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvcC50eXBlICE9PSBcInJlZlwiKSB7XG4gICAgICAgICAgICB0eXBlQXJncyArPSAoaXNVcGNhc2VGaXJzdClcbiAgICAgICAgICAgICAgICA/IGAvcmVmYFxuICAgICAgICAgICAgICAgIDogYC8ke3Byb3AuY2hpbGRUeXBlfWA7XG4gICAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAgIGxhbmdUeXBlID0gdHlwZU1hcHNbcHJvcC50eXBlXTtcbiAgICAgICAgaW5pdGlhbGl6ZXIgPSB0eXBlSW5pdGlhbGl6ZXJbcHJvcC50eXBlXTtcbiAgICB9XG5cbiAgICBwcm9wZXJ0eSArPSBgICR7bGFuZ1R5cGV9ICR7cHJvcC5uYW1lfWA7XG5cbiAgICByZXR1cm4gYFxcdEBTY2hlbWFGaWVsZChcIiR7dHlwZUFyZ3N9XCIpXFx0JHtpbmRlbnR9XG5cXHQke2luZGVudH0ke3Byb3BlcnR5fSA9ICR7aW5pdGlhbGl6ZXJ9O2Bcbn1cbiJdfQ==