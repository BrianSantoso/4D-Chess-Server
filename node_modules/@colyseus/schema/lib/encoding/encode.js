"use strict";
/**
 * Copyright (c) 2018 Endel Dreyer
 * Copyright (c) 2014 Ion Drive Software Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.number = exports.string = exports.boolean = exports.writeFloat64 = exports.writeFloat32 = exports.float64 = exports.float32 = exports.uint64 = exports.int64 = exports.uint32 = exports.int32 = exports.uint16 = exports.int16 = exports.uint8 = exports.int8 = exports.utf8Write = void 0;
/**
 * msgpack implementation highly based on notepack.io
 * https://github.com/darrachequesne/notepack
 */
function utf8Length(str) {
    var c = 0, length = 0;
    for (var i = 0, l = str.length; i < l; i++) {
        c = str.charCodeAt(i);
        if (c < 0x80) {
            length += 1;
        }
        else if (c < 0x800) {
            length += 2;
        }
        else if (c < 0xd800 || c >= 0xe000) {
            length += 3;
        }
        else {
            i++;
            length += 4;
        }
    }
    return length;
}
function utf8Write(view, offset, str) {
    var c = 0;
    for (var i = 0, l = str.length; i < l; i++) {
        c = str.charCodeAt(i);
        if (c < 0x80) {
            view[offset++] = c;
        }
        else if (c < 0x800) {
            view[offset++] = 0xc0 | (c >> 6);
            view[offset++] = 0x80 | (c & 0x3f);
        }
        else if (c < 0xd800 || c >= 0xe000) {
            view[offset++] = 0xe0 | (c >> 12);
            view[offset++] = 0x80 | (c >> 6 & 0x3f);
            view[offset++] = 0x80 | (c & 0x3f);
        }
        else {
            i++;
            c = 0x10000 + (((c & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));
            view[offset++] = 0xf0 | (c >> 18);
            view[offset++] = 0x80 | (c >> 12 & 0x3f);
            view[offset++] = 0x80 | (c >> 6 & 0x3f);
            view[offset++] = 0x80 | (c & 0x3f);
        }
    }
}
exports.utf8Write = utf8Write;
function int8(bytes, value) {
    bytes.push(value & 255);
}
exports.int8 = int8;
;
function uint8(bytes, value) {
    bytes.push(value & 255);
}
exports.uint8 = uint8;
;
function int16(bytes, value) {
    bytes.push(value & 255);
    bytes.push((value >> 8) & 255);
}
exports.int16 = int16;
;
function uint16(bytes, value) {
    bytes.push(value & 255);
    bytes.push((value >> 8) & 255);
}
exports.uint16 = uint16;
;
function int32(bytes, value) {
    bytes.push(value & 255);
    bytes.push((value >> 8) & 255);
    bytes.push((value >> 16) & 255);
    bytes.push((value >> 24) & 255);
}
exports.int32 = int32;
;
function uint32(bytes, value) {
    var b4 = value >> 24;
    var b3 = value >> 16;
    var b2 = value >> 8;
    var b1 = value;
    bytes.push(b1 & 255);
    bytes.push(b2 & 255);
    bytes.push(b3 & 255);
    bytes.push(b4 & 255);
}
exports.uint32 = uint32;
;
function int64(bytes, value) {
    var high = Math.floor(value / Math.pow(2, 32));
    var low = value >>> 0;
    uint32(bytes, low);
    uint32(bytes, high);
}
exports.int64 = int64;
;
function uint64(bytes, value) {
    var high = (value / Math.pow(2, 32)) >> 0;
    var low = value >>> 0;
    uint32(bytes, low);
    uint32(bytes, high);
}
exports.uint64 = uint64;
;
function float32(bytes, value) {
    writeFloat32(bytes, value);
}
exports.float32 = float32;
function float64(bytes, value) {
    writeFloat64(bytes, value);
}
exports.float64 = float64;
// force little endian to facilitate decoding on multiple implementations
var _isLittleEndian = true; // new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;
var _int32 = new Int32Array(2);
var _float32 = new Float32Array(_int32.buffer);
var _float64 = new Float64Array(_int32.buffer);
function writeFloat32(bytes, value) {
    _float32[0] = value;
    int32(bytes, _int32[0]);
}
exports.writeFloat32 = writeFloat32;
;
function writeFloat64(bytes, value) {
    _float64[0] = value;
    int32(bytes, _int32[_isLittleEndian ? 0 : 1]);
    int32(bytes, _int32[_isLittleEndian ? 1 : 0]);
}
exports.writeFloat64 = writeFloat64;
;
function boolean(bytes, value) {
    return uint8(bytes, value ? 1 : 0);
}
exports.boolean = boolean;
;
function string(bytes, value) {
    // encode `null` strings as empty.
    if (!value) {
        value = "";
    }
    var length = utf8Length(value);
    var size = 0;
    // fixstr
    if (length < 0x20) {
        bytes.push(length | 0xa0);
        size = 1;
    }
    // str 8
    else if (length < 0x100) {
        bytes.push(0xd9);
        uint8(bytes, length);
        size = 2;
    }
    // str 16
    else if (length < 0x10000) {
        bytes.push(0xda);
        uint16(bytes, length);
        size = 3;
    }
    // str 32
    else if (length < 0x100000000) {
        bytes.push(0xdb);
        uint32(bytes, length);
        size = 5;
    }
    else {
        throw new Error('String too long');
    }
    utf8Write(bytes, bytes.length, value);
    return size + length;
}
exports.string = string;
function number(bytes, value) {
    if (isNaN(value)) {
        return number(bytes, 0);
    }
    else if (!isFinite(value)) {
        return number(bytes, (value > 0) ? Number.MAX_SAFE_INTEGER : -Number.MAX_SAFE_INTEGER);
    }
    else if (value !== (value | 0)) {
        bytes.push(0xcb);
        writeFloat64(bytes, value);
        return 9;
        // TODO: encode float 32?
        // is it possible to differentiate between float32 / float64 here?
        // // float 32
        // bytes.push(0xca);
        // writeFloat32(bytes, value);
        // return 5;
    }
    if (value >= 0) {
        // positive fixnum
        if (value < 0x80) {
            uint8(bytes, value);
            return 1;
        }
        // uint 8
        if (value < 0x100) {
            bytes.push(0xcc);
            uint8(bytes, value);
            return 2;
        }
        // uint 16
        if (value < 0x10000) {
            bytes.push(0xcd);
            uint16(bytes, value);
            return 3;
        }
        // uint 32
        if (value < 0x100000000) {
            bytes.push(0xce);
            uint32(bytes, value);
            return 5;
        }
        // uint 64
        bytes.push(0xcf);
        uint64(bytes, value);
        return 9;
    }
    else {
        // negative fixnum
        if (value >= -0x20) {
            bytes.push(0xe0 | (value + 0x20));
            return 1;
        }
        // int 8
        if (value >= -0x80) {
            bytes.push(0xd0);
            int8(bytes, value);
            return 2;
        }
        // int 16
        if (value >= -0x8000) {
            bytes.push(0xd1);
            int16(bytes, value);
            return 3;
        }
        // int 32
        if (value >= -0x80000000) {
            bytes.push(0xd2);
            int32(bytes, value);
            return 5;
        }
        // int 64
        bytes.push(0xd3);
        int64(bytes, value);
        return 9;
    }
}
exports.number = number;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuY29kaW5nL2VuY29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXFCRzs7O0FBRUg7OztHQUdHO0FBR0gsU0FBUyxVQUFVLENBQUMsR0FBRztJQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUN0QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFDLENBQUMsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxHQUFHLElBQUksRUFBRTtZQUNaLE1BQU0sSUFBSSxDQUFDLENBQUM7U0FDYjthQUNJLElBQUksQ0FBQyxHQUFHLEtBQUssRUFBRTtZQUNsQixNQUFNLElBQUksQ0FBQyxDQUFDO1NBQ2I7YUFDSSxJQUFJLENBQUMsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLE1BQU0sRUFBRTtZQUNsQyxNQUFNLElBQUksQ0FBQyxDQUFDO1NBQ2I7YUFDSTtZQUNILENBQUMsRUFBRSxDQUFDO1lBQ0osTUFBTSxJQUFJLENBQUMsQ0FBQztTQUNiO0tBQ0Y7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQsU0FBZ0IsU0FBUyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRztJQUN6QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFDLENBQUMsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMs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QUFJLENBQUMsSUFBSSxFQUFFO1lBQ2xCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDbEMsT0FBTyxDQUFDLENBQUM7U0FDVjtRQUVELFFBQVE7UUFDUixJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRTtZQUNsQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pCLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDbkIsT0FBTyxDQUFDLENBQUM7U0FDVjtRQUVELFNBQVM7UUFDVCxJQUFJLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNwQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pCLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDcEIsT0FBTyxDQUFDLENBQUM7U0FDVjtRQUVELFNBQVM7UUFDVCxJQUFJLEtBQUssSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUN4QixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pCLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDcEIsT0FBTyxDQUFDLENBQUM7U0FDVjtRQUVELFNBQVM7UUFDVCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pCLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDcEIsT0FBTyxDQUFDLENBQUM7S0FDVjtBQUNILENBQUM7QUF4RkQsd0JBd0ZDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggRW5kZWwgRHJleWVyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgSW9uIERyaXZlIFNvZnR3YXJlIEx0ZC5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFXG4gKi9cblxuLyoqXG4gKiBtc2dwYWNrIGltcGxlbWVudGF0aW9uIGhpZ2hseSBiYXNlZCBvbiBub3RlcGFjay5pb1xuICogaHR0cHM6Ly9naXRodWIuY29tL2RhcnJhY2hlcXVlc25lL25vdGVwYWNrXG4gKi9cblxuXG5mdW5jdGlvbiB1dGY4TGVuZ3RoKHN0cikge1xuICB2YXIgYyA9IDAsIGxlbmd0aCA9IDA7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3RyLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoYyA8IDB4ODApIHtcbiAgICAgIGxlbmd0aCArPSAxO1xuICAgIH1cbiAgICBlbHNlIGlmIChjIDwgMHg4MDApIHtcbiAgICAgIGxlbmd0aCArPSAyO1xuICAgIH1cbiAgICBlbHNlIGlmIChjIDwgMHhkODAwIHx8IGMgPj0gMHhlMDAwKSB7XG4gICAgICBsZW5ndGggKz0gMztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpKys7XG4gICAgICBsZW5ndGggKz0gNDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxlbmd0aDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHV0ZjhXcml0ZSh2aWV3LCBvZmZzZXQsIHN0cikge1xuICB2YXIgYyA9IDA7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3RyLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoYyA8IDB4ODApIHtcbiAgICAgIHZpZXdbb2Zmc2V0KytdID0gYztcbiAgICB9XG4gICAgZWxzZSBpZiAoYyA8IDB4ODAwKSB7XG4gICAgICB2aWV3W29mZnNldCsrXSA9IDB4YzAgfCAoYyA+PiA2KTtcbiAgICAgIHZpZXdbb2Zmc2V0KytdID0gMHg4MCB8IChjICYgMHgzZik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGMgPCAweGQ4MDAgfHwgYyA+PSAweGUwMDApIHtcbiAgICAgIHZpZXdbb2Zmc2V0KytdID0gMHhlMCB8IChjID4+IDEyKTtcbiAgICAgIHZpZXdbb2Zmc2V0KytdID0gMHg4MCB8IChjID4+IDYgJiAweDNmKTtcbiAgICAgIHZpZXdbb2Zmc2V0KytdID0gMHg4MCB8IChjICYgMHgzZik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaSsrO1xuICAgICAgYyA9IDB4MTAwMDAgKyAoKChjICYgMHgzZmYpIDw8IDEwKSB8IChzdHIuY2hhckNvZGVBdChpKSAmIDB4M2ZmKSk7XG4gICAgICB2aWV3W29mZnNldCsrXSA9IDB4ZjAgfCAoYyA+PiAxOCk7XG4gICAgICB2aWV3W29mZnNldCsrXSA9IDB4ODAgfCAoYyA+PiAxMiAmIDB4M2YpO1xuICAgICAgdmlld1tvZmZzZXQrK10gPSAweDgwIHwgKGMgPj4gNiAmIDB4M2YpO1xuICAgICAgdmlld1tvZmZzZXQrK10gPSAweDgwIHwgKGMgJiAweDNmKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludDgoYnl0ZXMsIHZhbHVlKSB7XG4gIGJ5dGVzLnB1c2godmFsdWUgJiAyNTUpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVpbnQ4KGJ5dGVzLCB2YWx1ZSkge1xuICBieXRlcy5wdXNoKHZhbHVlICYgMjU1KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnQxNihieXRlcywgdmFsdWUpIHtcbiAgYnl0ZXMucHVzaCh2YWx1ZSAmIDI1NSk7XG4gIGJ5dGVzLnB1c2goKHZhbHVlID4+IDgpICYgMjU1KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB1aW50MTYoYnl0ZXMsIHZhbHVlKSB7XG4gIGJ5dGVzLnB1c2godmFsdWUgJiAyNTUpO1xuICBieXRlcy5wdXNoKCh2YWx1ZSA+PiA4KSAmIDI1NSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gaW50MzIoYnl0ZXMsIHZhbHVlKSB7XG4gIGJ5dGVzLnB1c2godmFsdWUgJiAyNTUpO1xuICBieXRlcy5wdXNoKCh2YWx1ZSA+PiA4KSAmIDI1NSk7XG4gIGJ5dGVzLnB1c2goKHZhbHVlID4+IDE2KSAmIDI1NSk7XG4gIGJ5dGVzLnB1c2goKHZhbHVlID4+IDI0KSAmIDI1NSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdWludDMyKGJ5dGVzLCB2YWx1ZSkge1xuICBjb25zdCBiNCA9IHZhbHVlID4+IDI0O1xuICBjb25zdCBiMyA9IHZhbHVlID4+IDE2O1xuICBjb25zdCBiMiA9IHZhbHVlID4+IDg7XG4gIGNvbnN0IGIxID0gdmFsdWU7XG4gIGJ5dGVzLnB1c2goYjEgJiAyNTUpO1xuICBieXRlcy5wdXNoKGIyICYgMjU1KTtcbiAgYnl0ZXMucHVzaChiMyAmIDI1NSk7XG4gIGJ5dGVzLnB1c2goYjQgJiAyNTUpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGludDY0KGJ5dGVzLCB2YWx1ZSkge1xuICBjb25zdCBoaWdoID0gTWF0aC5mbG9vcih2YWx1ZSAvIE1hdGgucG93KDIsIDMyKSk7XG4gIGNvbnN0IGxvdyA9IHZhbHVlID4+PiAwO1xuICB1aW50MzIoYnl0ZXMsIGxvdyk7XG4gIHVpbnQzMihieXRlcywgaGlnaCk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdWludDY0KGJ5dGVzLCB2YWx1ZSkge1xuICBjb25zdCBoaWdoID0gKHZhbHVlIC8gTWF0aC5wb3coMiwgMzIpKSA+PiAwO1xuICBjb25zdCBsb3cgPSB2YWx1ZSA+Pj4gMDtcbiAgdWludDMyKGJ5dGVzLCBsb3cpO1xuICB1aW50MzIoYnl0ZXMsIGhpZ2gpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGZsb2F0MzIoYnl0ZXMsIHZhbHVlKSB7XG4gIHdyaXRlRmxvYXQzMihieXRlcywgdmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmxvYXQ2NChieXRlcywgdmFsdWUpIHtcbiAgd3JpdGVGbG9hdDY0KGJ5dGVzLCB2YWx1ZSk7XG59XG5cbi8vIGZvcmNlIGxpdHRsZSBlbmRpYW4gdG8gZmFjaWxpdGF0ZSBkZWNvZGluZyBvbiBtdWx0aXBsZSBpbXBsZW1lbnRhdGlvbnNcbmNvbnN0IF9pc0xpdHRsZUVuZGlhbiA9IHRydWU7ICAvLyBuZXcgVWludDE2QXJyYXkobmV3IFVpbnQ4QXJyYXkoWzEsIDBdKS5idWZmZXIpWzBdID09PSAxO1xuY29uc3QgX2ludDMyID0gbmV3IEludDMyQXJyYXkoMik7XG5jb25zdCBfZmxvYXQzMiA9IG5ldyBGbG9hdDMyQXJyYXkoX2ludDMyLmJ1ZmZlcik7XG5jb25zdCBfZmxvYXQ2NCA9IG5ldyBGbG9hdDY0QXJyYXkoX2ludDMyLmJ1ZmZlcik7XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZUZsb2F0MzIoYnl0ZXMsIHZhbHVlKSB7XG4gIF9mbG9hdDMyWzBdID0gdmFsdWU7XG4gIGludDMyKGJ5dGVzLCBfaW50MzJbMF0pO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlRmxvYXQ2NChieXRlcywgdmFsdWUpIHtcbiAgX2Zsb2F0NjRbMF0gPSB2YWx1ZTtcbiAgaW50MzIoYnl0ZXMsIF9pbnQzMltfaXNMaXR0bGVFbmRpYW4gPyAwIDogMV0pO1xuICBpbnQzMihieXRlcywgX2ludDMyW19pc0xpdHRsZUVuZGlhbiA/IDEgOiAwXSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gYm9vbGVhbihieXRlcywgdmFsdWUpIHtcbiAgcmV0dXJuIHVpbnQ4KGJ5dGVzLCB2YWx1ZSA/IDEgOiAwKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmcoYnl0ZXMsIHZhbHVlKSB7XG4gIC8vIGVuY29kZSBgbnVsbGAgc3RyaW5ncyBhcyBlbXB0eS5cbiAgaWYgKCF2YWx1ZSkgeyB2YWx1ZSA9IFwiXCI7IH1cblxuICBsZXQgbGVuZ3RoID0gdXRmOExlbmd0aCh2YWx1ZSk7XG4gIGxldCBzaXplID0gMDtcblxuICAvLyBmaXhzdHJcbiAgaWYgKGxlbmd0aCA8IDB4MjApIHtcbiAgICBieXRlcy5wdXNoKGxlbmd0aCB8IDB4YTApO1xuICAgIHNpemUgPSAxO1xuICB9XG4gIC8vIHN0ciA4XG4gIGVsc2UgaWYgKGxlbmd0aCA8IDB4MTAwKSB7XG4gICAgYnl0ZXMucHVzaCgweGQ5KTtcbiAgICB1aW50OChieXRlcywgbGVuZ3RoKTtcbiAgICBzaXplID0gMjtcbiAgfVxuICAvLyBzdHIgMTZcbiAgZWxzZSBpZiAobGVuZ3RoIDwgMHgxMDAwMCkge1xuICAgIGJ5dGVzLnB1c2goMHhkYSk7XG4gICAgdWludDE2KGJ5dGVzLCBsZW5ndGgpO1xuICAgIHNpemUgPSAzO1xuICB9XG4gIC8vIHN0ciAzMlxuICBlbHNlIGlmIChsZW5ndGggPCAweDEwMDAwMDAwMCkge1xuICAgIGJ5dGVzLnB1c2goMHhkYik7XG4gICAgdWludDMyKGJ5dGVzLCBsZW5ndGgpO1xuICAgIHNpemUgPSA1O1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignU3RyaW5nIHRvbyBsb25nJyk7XG4gIH1cblxuICB1dGY4V3JpdGUoYnl0ZXMsIGJ5dGVzLmxlbmd0aCwgdmFsdWUpO1xuXG4gIHJldHVybiBzaXplICsgbGVuZ3RoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbnVtYmVyKGJ5dGVzLCB2YWx1ZSkge1xuICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgcmV0dXJuIG51bWJlcihieXRlcywgMCk7XG5cbiAgfSBlbHNlIGlmICghaXNGaW5pdGUodmFsdWUpKSB7XG4gICAgcmV0dXJuIG51bWJlcihieXRlcywgKHZhbHVlID4gMCkgPyBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiA6IC1OdW1iZXIuTUFYX1NBRkVfSU5URUdFUik7XG5cbiAgfSBlbHNlIGlmICh2YWx1ZSAhPT0gKHZhbHVlfDApKSB7XG4gICAgYnl0ZXMucHVzaCgweGNiKTtcbiAgICB3cml0ZUZsb2F0NjQoYnl0ZXMsIHZhbHVlKTtcbiAgICByZXR1cm4gOTtcblxuICAgIC8vIFRPRE86IGVuY29kZSBmbG9hdCAzMj9cbiAgICAvLyBpcyBpdCBwb3NzaWJsZSB0byBkaWZmZXJlbnRpYXRlIGJldHdlZW4gZmxvYXQzMiAvIGZsb2F0NjQgaGVyZT9cblxuICAgIC8vIC8vIGZsb2F0IDMyXG4gICAgLy8gYnl0ZXMucHVzaCgweGNhKTtcbiAgICAvLyB3cml0ZUZsb2F0MzIoYnl0ZXMsIHZhbHVlKTtcbiAgICAvLyByZXR1cm4gNTtcbiAgfVxuXG4gIGlmICh2YWx1ZSA+PSAwKSB7XG4gICAgLy8gcG9zaXRpdmUgZml4bnVtXG4gICAgaWYgKHZhbHVlIDwgMHg4MCkge1xuICAgICAgdWludDgoYnl0ZXMsIHZhbHVlKTtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIC8vIHVpbnQgOFxuICAgIGlmICh2YWx1ZSA8IDB4MTAwKSB7XG4gICAgICBieXRlcy5wdXNoKDB4Y2MpO1xuICAgICAgdWludDgoYnl0ZXMsIHZhbHVlKTtcbiAgICAgIHJldHVybiAyO1xuICAgIH1cblxuICAgIC8vIHVpbnQgMTZcbiAgICBpZiAodmFsdWUgPCAweDEwMDAwKSB7XG4gICAgICBieXRlcy5wdXNoKDB4Y2QpO1xuICAgICAgdWludDE2KGJ5dGVzLCB2YWx1ZSk7XG4gICAgICByZXR1cm4gMztcbiAgICB9XG5cbiAgICAvLyB1aW50IDMyXG4gICAgaWYgKHZhbHVlIDwgMHgxMDAwMDAwMDApIHtcbiAgICAgIGJ5dGVzLnB1c2goMHhjZSk7XG4gICAgICB1aW50MzIoYnl0ZXMsIHZhbHVlKTtcbiAgICAgIHJldHVybiA1O1xuICAgIH1cblxuICAgIC8vIHVpbnQgNjRcbiAgICBieXRlcy5wdXNoKDB4Y2YpO1xuICAgIHVpbnQ2NChieXRlcywgdmFsdWUpO1xuICAgIHJldHVybiA5O1xuXG4gIH0gZWxzZSB7XG5cbiAgICAvLyBuZWdhdGl2ZSBmaXhudW1cbiAgICBpZiAodmFsdWUgPj0gLTB4MjApIHtcbiAgICAgIGJ5dGVzLnB1c2goMHhlMCB8ICh2YWx1ZSArIDB4MjApKTtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIC8vIGludCA4XG4gICAgaWYgKHZhbHVlID49IC0weDgwKSB7XG4gICAgICBieXRlcy5wdXNoKDB4ZDApO1xuICAgICAgaW50OChieXRlcywgdmFsdWUpO1xuICAgICAgcmV0dXJuIDI7XG4gICAgfVxuXG4gICAgLy8gaW50IDE2XG4gICAgaWYgKHZhbHVlID49IC0weDgwMDApIHtcbiAgICAgIGJ5dGVzLnB1c2goMHhkMSk7XG4gICAgICBpbnQxNihieXRlcywgdmFsdWUpO1xuICAgICAgcmV0dXJuIDM7XG4gICAgfVxuXG4gICAgLy8gaW50IDMyXG4gICAgaWYgKHZhbHVlID49IC0weDgwMDAwMDAwKSB7XG4gICAgICBieXRlcy5wdXNoKDB4ZDIpO1xuICAgICAgaW50MzIoYnl0ZXMsIHZhbHVlKTtcbiAgICAgIHJldHVybiA1O1xuICAgIH1cblxuICAgIC8vIGludCA2NFxuICAgIGJ5dGVzLnB1c2goMHhkMyk7XG4gICAgaW50NjQoYnl0ZXMsIHZhbHVlKTtcbiAgICByZXR1cm4gOTtcbiAgfVxufSJdfQ==