"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OPERATION = exports.TYPE_ID = exports.SWITCH_TO_STRUCTURE = void 0;
// export const SWITCH_TO_STRUCTURE = 193; (easily collides with DELETE_AND_ADD + fieldIndex = 2)
exports.SWITCH_TO_STRUCTURE = 255; // (decoding collides with DELETE_AND_ADD + fieldIndex = 63)
exports.TYPE_ID = 213;
/**
 * Encoding Schema field operations.
 */
var OPERATION;
(function (OPERATION) {
    // add new structure/primitive
    OPERATION[OPERATION["ADD"] = 128] = "ADD";
    // replace structure/primitive
    OPERATION[OPERATION["REPLACE"] = 0] = "REPLACE";
    // delete field
    OPERATION[OPERATION["DELETE"] = 64] = "DELETE";
    // DELETE field, followed by an ADD
    OPERATION[OPERATION["DELETE_AND_ADD"] = 192] = "DELETE_AND_ADD";
    // TOUCH is used to determine hierarchy of nested Schema structures during serialization.
    // touches are NOT encoded.
    OPERATION[OPERATION["TOUCH"] = 1] = "TOUCH";
    // MapSchema Operations
    OPERATION[OPERATION["CLEAR"] = 10] = "CLEAR";
})(OPERATION = exports.OPERATION || (exports.OPERATION = {}));
// export enum OPERATION {
//     // add new structure/primitive
//     // (128)
//     ADD = 128, // 10000000,
//     // replace structure/primitive
//     REPLACE = 1,// 00000001
//     // delete field
//     DELETE = 192, // 11000000
//     // DELETE field, followed by an ADD
//     DELETE_AND_ADD = 224, // 11100000
//     // TOUCH is used to determine hierarchy of nested Schema structures during serialization.
//     // touches are NOT encoded.
//     TOUCH = 0, // 00000000
//     // MapSchema Operations
//     CLEAR = 10,
// }
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlHQUFpRztBQUNwRixRQUFBLG1CQUFtQixHQUFHLEdBQUcsQ0FBQyxDQUFDLDREQUE0RDtBQUN2RixRQUFBLE9BQU8sR0FBRyxHQUFHLENBQUM7QUFFM0I7O0dBRUc7QUFDSCxJQUFZLFNBbUJYO0FBbkJELFdBQVksU0FBUztJQUNqQiw4QkFBOEI7SUFDOUIseUNBQVMsQ0FBQTtJQUVULDhCQUE4QjtJQUM5QiwrQ0FBVyxDQUFBO0lBRVgsZUFBZTtJQUNmLDhDQUFXLENBQUE7SUFFWCxtQ0FBbUM7SUFDbkMsK0RBQW9CLENBQUE7SUFFcEIseUZBQXlGO0lBQ3pGLDJCQUEyQjtJQUMzQiwyQ0FBUyxDQUFBO0lBRVQsdUJBQXVCO0lBQ3ZCLDRDQUFVLENBQUE7QUFDZCxDQUFDLEVBbkJXLFNBQVMsR0FBVCxpQkFBUyxLQUFULGlCQUFTLFFBbUJwQjtBQUVELDBCQUEwQjtBQUMxQixxQ0FBcUM7QUFDckMsZUFBZTtBQUNmLDhCQUE4QjtBQUU5QixxQ0FBcUM7QUFDckMsOEJBQThCO0FBRTlCLHNCQUFzQjtBQUN0QixnQ0FBZ0M7QUFFaEMsMENBQTBDO0FBQzFDLHdDQUF3QztBQUV4QyxnR0FBZ0c7QUFDaEcsa0NBQWtDO0FBQ2xDLDZCQUE2QjtBQUU3Qiw4QkFBOEI7QUFDOUIsa0JBQWtCO0FBQ2xCLElBQUkiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHBvcnQgY29uc3QgU1dJVENIX1RPX1NUUlVDVFVSRSA9IDE5MzsgKGVhc2lseSBjb2xsaWRlcyB3aXRoIERFTEVURV9BTkRfQUREICsgZmllbGRJbmRleCA9IDIpXG5leHBvcnQgY29uc3QgU1dJVENIX1RPX1NUUlVDVFVSRSA9IDI1NTsgLy8gKGRlY29kaW5nIGNvbGxpZGVzIHdpdGggREVMRVRFX0FORF9BREQgKyBmaWVsZEluZGV4ID0gNjMpXG5leHBvcnQgY29uc3QgVFlQRV9JRCA9IDIxMztcblxuLyoqXG4gKiBFbmNvZGluZyBTY2hlbWEgZmllbGQgb3BlcmF0aW9ucy5cbiAqL1xuZXhwb3J0IGVudW0gT1BFUkFUSU9OIHtcbiAgICAvLyBhZGQgbmV3IHN0cnVjdHVyZS9wcmltaXRpdmVcbiAgICBBREQgPSAxMjgsXG5cbiAgICAvLyByZXBsYWNlIHN0cnVjdHVyZS9wcmltaXRpdmVcbiAgICBSRVBMQUNFID0gMCxcblxuICAgIC8vIGRlbGV0ZSBmaWVsZFxuICAgIERFTEVURSA9IDY0LFxuXG4gICAgLy8gREVMRVRFIGZpZWxkLCBmb2xsb3dlZCBieSBhbiBBRERcbiAgICBERUxFVEVfQU5EX0FERCA9IDE5MiwgLy8gMTExMDAwMDBcblxuICAgIC8vIFRPVUNIIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIGhpZXJhcmNoeSBvZiBuZXN0ZWQgU2NoZW1hIHN0cnVjdHVyZXMgZHVyaW5nIHNlcmlhbGl6YXRpb24uXG4gICAgLy8gdG91Y2hlcyBhcmUgTk9UIGVuY29kZWQuXG4gICAgVE9VQ0ggPSAxLCAvLyAwMDAwMDAwMFxuXG4gICAgLy8gTWFwU2NoZW1hIE9wZXJhdGlvbnNcbiAgICBDTEVBUiA9IDEwLFxufVxuXG4vLyBleHBvcnQgZW51bSBPUEVSQVRJT04ge1xuLy8gICAgIC8vIGFkZCBuZXcgc3RydWN0dXJlL3ByaW1pdGl2ZVxuLy8gICAgIC8vICgxMjgpXG4vLyAgICAgQUREID0gMTI4LCAvLyAxMDAwMDAwMCxcblxuLy8gICAgIC8vIHJlcGxhY2Ugc3RydWN0dXJlL3ByaW1pdGl2ZVxuLy8gICAgIFJFUExBQ0UgPSAxLC8vIDAwMDAwMDAxXG5cbi8vICAgICAvLyBkZWxldGUgZmllbGRcbi8vICAgICBERUxFVEUgPSAxOTIsIC8vIDExMDAwMDAwXG5cbi8vICAgICAvLyBERUxFVEUgZmllbGQsIGZvbGxvd2VkIGJ5IGFuIEFERFxuLy8gICAgIERFTEVURV9BTkRfQUREID0gMjI0LCAvLyAxMTEwMDAwMFxuXG4vLyAgICAgLy8gVE9VQ0ggaXMgdXNlZCB0byBkZXRlcm1pbmUgaGllcmFyY2h5IG9mIG5lc3RlZCBTY2hlbWEgc3RydWN0dXJlcyBkdXJpbmcgc2VyaWFsaXphdGlvbi5cbi8vICAgICAvLyB0b3VjaGVzIGFyZSBOT1QgZW5jb2RlZC5cbi8vICAgICBUT1VDSCA9IDAsIC8vIDAwMDAwMDAwXG5cbi8vICAgICAvLyBNYXBTY2hlbWEgT3BlcmF0aW9uc1xuLy8gICAgIENMRUFSID0gMTAsXG4vLyB9Il19