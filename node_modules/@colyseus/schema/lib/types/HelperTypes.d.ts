declare type Bool = 'true' | 'false';
declare type Key = string | number | symbol;
declare type Not<X extends Bool> = {
    true: 'false';
    false: 'true';
}[X];
declare type HaveIntersection<S1 extends string, S2 extends string> = ({
    [K in S1]: 'true';
} & {
    [key: string]: 'false';
})[S2];
declare type IsNeverWorker<S extends Key> = ({
    [K in S]: 'false';
} & {
    [key: string]: 'true';
})[S];
declare type IsNever<T extends Key> = Not<HaveIntersection<IsNeverWorker<T>, 'false'>>;
declare type IsFunction<T> = IsNever<keyof T>;
export declare type NonFunctionProps<T> = {
    [K in keyof T]: {
        'false': K;
        'true': never;
    }[IsFunction<T[K]>];
}[keyof T];
export declare type NonFunctionPropNames<T> = {
    [K in keyof T]: T[K] extends Function ? never : K;
}[keyof T];
export {};
