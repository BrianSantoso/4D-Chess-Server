"use strict";
/// <reference path="../typings/cocos-creator.d.ts" />
Object.defineProperty(exports, "__esModule", { value: true });
exports.getItem = exports.removeItem = exports.setItem = void 0;
/**
 * We do not assign 'storage' to window.localStorage immediatelly for React
 * Native compatibility. window.localStorage is not present when this module is
 * loaded.
 */
var storage;
function getStorage() {
    if (!storage) {
        storage = (typeof (cc) !== 'undefined' && cc.sys && cc.sys.localStorage)
            ? cc.sys.localStorage // compatibility with cocos creator
            : typeof (window) !== "undefined" && window.localStorage //RN does have window object at this point, but localStorage is not defined
                ? window.localStorage // regular browser environment
                : {
                    cache: {},
                    setItem: function (key, value) { this.cache[key] = value; },
                    getItem: function (key) { this.cache[key]; },
                    removeItem: function (key) { delete this.cache[key]; },
                };
    }
    return storage;
}
function setItem(key, value) {
    getStorage().setItem(key, value);
}
exports.setItem = setItem;
function removeItem(key) {
    getStorage().removeItem(key);
}
exports.removeItem = removeItem;
function getItem(key, callback) {
    var value = getStorage().getItem(key);
    if (typeof (Promise) === 'undefined' || // old browsers
        !(value instanceof Promise)) {
        // browser has synchronous return
        callback(value);
    }
    else {
        // react-native is asynchronous
        value.then(function (id) { return callback(id); });
    }
}
exports.getItem = getItem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RvcmFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9TdG9yYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzREFBc0Q7OztBQUV0RDs7OztHQUlHO0FBRUgsSUFBSSxPQUFZLENBQUM7QUFFakIsU0FBUyxVQUFVO0lBQ2YsSUFBSSxDQUFDLE9BQU8sRUFBRztRQUNYLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxXQUFXLElBQUksRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQztZQUNwRSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUUsbUNBQW1DO1lBQzFELENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsMkVBQTJFO2dCQUNoSSxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyw4QkFBOEI7Z0JBQ3BELENBQUMsQ0FBQztvQkFDRSxLQUFLLEVBQUUsRUFBRTtvQkFDVCxPQUFPLEVBQUUsVUFBUyxHQUFHLEVBQUUsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFDMUQsT0FBTyxFQUFFLFVBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMzQyxVQUFVLEVBQUUsVUFBUyxHQUFHLElBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDeEQsQ0FBQztLQUViO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQUVELFNBQWdCLE9BQU8sQ0FBQyxHQUFXLEVBQUUsS0FBYTtJQUM5QyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFGRCwwQkFFQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxHQUFXO0lBQ2xDLFVBQVUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBRkQsZ0NBRUM7QUFFRCxTQUFnQixPQUFPLENBQUMsR0FBVyxFQUFFLFFBQWtCO0lBQ25ELElBQU0sS0FBSyxHQUFRLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUU3QyxJQUNJLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxXQUFXLElBQUksZUFBZTtRQUNuRCxDQUFDLENBQUMsS0FBSyxZQUFZLE9BQU8sQ0FBQyxFQUM3QjtRQUNFLGlDQUFpQztRQUNqQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7S0FFbkI7U0FBTTtRQUNILCtCQUErQjtRQUMvQixLQUFLLENBQUMsSUFBSSxDQUFDLFVBQUMsRUFBRSxJQUFLLE9BQUEsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFaLENBQVksQ0FBQyxDQUFDO0tBQ3BDO0FBQ0wsQ0FBQztBQWRELDBCQWNDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGluZ3MvY29jb3MtY3JlYXRvci5kLnRzXCIgLz5cblxuLyoqXG4gKiBXZSBkbyBub3QgYXNzaWduICdzdG9yYWdlJyB0byB3aW5kb3cubG9jYWxTdG9yYWdlIGltbWVkaWF0ZWxseSBmb3IgUmVhY3RcbiAqIE5hdGl2ZSBjb21wYXRpYmlsaXR5LiB3aW5kb3cubG9jYWxTdG9yYWdlIGlzIG5vdCBwcmVzZW50IHdoZW4gdGhpcyBtb2R1bGUgaXNcbiAqIGxvYWRlZC5cbiAqL1xuXG5sZXQgc3RvcmFnZTogYW55O1xuXG5mdW5jdGlvbiBnZXRTdG9yYWdlKCk6IFN0b3JhZ2Uge1xuICAgIGlmICghc3RvcmFnZSkgIHtcbiAgICAgICAgc3RvcmFnZSA9ICh0eXBlb2YgKGNjKSAhPT0gJ3VuZGVmaW5lZCcgJiYgY2Muc3lzICYmIGNjLnN5cy5sb2NhbFN0b3JhZ2UpXG4gICAgICAgICAgICA/IGNjLnN5cy5sb2NhbFN0b3JhZ2UgIC8vIGNvbXBhdGliaWxpdHkgd2l0aCBjb2NvcyBjcmVhdG9yXG4gICAgICAgICAgICA6IHR5cGVvZiAod2luZG93KSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYWxTdG9yYWdlIC8vUk4gZG9lcyBoYXZlIHdpbmRvdyBvYmplY3QgYXQgdGhpcyBwb2ludCwgYnV0IGxvY2FsU3RvcmFnZSBpcyBub3QgZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gd2luZG93LmxvY2FsU3RvcmFnZSAvLyByZWd1bGFyIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAgICAgICAgICAgICAgICA6IHsgLy8gbW9jayBsb2NhbFN0b3JhZ2UgZm9yIE5vZGUuanMgb3IgUk4gZW52aXJvbm1lbnRcbiAgICAgICAgICAgICAgICAgICAgY2FjaGU6IHt9LFxuICAgICAgICAgICAgICAgICAgICBzZXRJdGVtOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7IHRoaXMuY2FjaGVba2V5XSA9IHZhbHVlOyB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRJdGVtOiBmdW5jdGlvbihrZXkpIHsgdGhpcy5jYWNoZVtrZXldOyB9LFxuICAgICAgICAgICAgICAgICAgICByZW1vdmVJdGVtOiBmdW5jdGlvbihrZXkpIHsgZGVsZXRlIHRoaXMuY2FjaGVba2V5XTsgfSxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgfVxuICAgIHJldHVybiBzdG9yYWdlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0SXRlbShrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xuICAgIGdldFN0b3JhZ2UoKS5zZXRJdGVtKGtleSwgdmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlSXRlbShrZXk6IHN0cmluZykge1xuICAgIGdldFN0b3JhZ2UoKS5yZW1vdmVJdGVtKGtleSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJdGVtKGtleTogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24pIHtcbiAgICBjb25zdCB2YWx1ZTogYW55ID0gZ2V0U3RvcmFnZSgpLmdldEl0ZW0oa2V5KTtcblxuICAgIGlmIChcbiAgICAgICAgdHlwZW9mIChQcm9taXNlKSA9PT0gJ3VuZGVmaW5lZCcgfHwgLy8gb2xkIGJyb3dzZXJzXG4gICAgICAgICEodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKVxuICAgICkge1xuICAgICAgICAvLyBicm93c2VyIGhhcyBzeW5jaHJvbm91cyByZXR1cm5cbiAgICAgICAgY2FsbGJhY2sodmFsdWUpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcmVhY3QtbmF0aXZlIGlzIGFzeW5jaHJvbm91c1xuICAgICAgICB2YWx1ZS50aGVuKChpZCkgPT4gY2FsbGJhY2soaWQpKTtcbiAgICB9XG59XG4iXX0=